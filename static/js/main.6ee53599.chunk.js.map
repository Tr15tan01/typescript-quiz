{"version":3,"sources":["API.ts","images/bg.jpg","App.Styles.ts","components/QuestionCard.Styles.ts","components/QuestionCard.tsx","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","GlobalStyle","createGlobalStyle","BGIMG","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answer","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","answers","array","incorrect_answers","correct_answer","sort","Math","random","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","EASY","startTrivia","newQuestions","length","undefined","e","currentTarget","prev","AnswerObject","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ee53599.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n\tcategory: string;\r\n\tcorrect_answer: string;\r\n\tdifficulty: string;\r\n\tincorrect_answers: string[];\r\n\tquestion: string;\r\n\ttype: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n\tEASY = 'easy',\r\n\tMEDIUM = 'medium',\r\n\tHARD = 'hard'\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n\tconst data = await (await fetch(endpoint)).json();\r\n\t// console.log('data', data)\r\n\treturn data.results.map((question: Question) => ({\r\n\t\t...question,\r\n\t\tanswers: shuffleArray([\r\n\t\t\t...question.incorrect_answers,\r\n\t\t\tquestion.correct_answer\r\n\t\t])\r\n\t}));\r\n};\r\n","export default __webpack_public_path__ + \"static/media/bg.92bedd0a.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nimport BGIMG from './images/bg.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    height: 100vh;\r\n}\r\n\r\nbody {\r\n    background-image: url(${BGIMG});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\np {\r\n    color: gray;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\t> p {\r\n\t\tcolor: #fff;\r\n\t}\r\n\t.score {\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 2rem;\r\n\t\tmargin: 0 auto 1rem;\r\n\t}\r\n\th1 {\r\n\t\tfont-family: Arial;\r\n\t\tbackground-image: linear-gradient(180deg, #fff, #87f1ff);\r\n\t\tfont-weight: 400;\r\n\t\tbackground-size: 100%;\r\n\t\tbackground-clip: text;\r\n\t\t-webkit-background-clip: text;\r\n\t\t-webkit-text-fill-color: transparent;\r\n\t\t-moz-background-clip: text;\r\n\t\t-moz-text-fill-color: transparent;\r\n\t\tfilter: drop-shadow(2px 2px #0085a3);\r\n\t\tfont-size: 70px;\r\n\t\ttext-align: center;\r\n\t\tmargin: 20px;\r\n\t}\r\n\t.start,\r\n\t.next {\r\n\t\tcursor: pointer;\r\n\t\tbackground: linear-gradient(180deg, dodgerblue, lightblue);\r\n\t\tborder: none;\r\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n\t\tborder-radius: 10px;\r\n\t\theight: 40px;\r\n\t\tmargin: 20px 0;\r\n\t\tpadding: 0 40px;\r\n\t}\r\n\t.start {\r\n\t\tmax-width: 200px;\r\n\t}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1200px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  // border: 2px solid gray;\r\n  padding: 30px;\r\n  transition: all 0.5s ease;\r\n  box-shadow: 10px 5px 10px rgba(0, 0, 0, 0.6);\r\n  text-align: center;\r\n  animation: fadeIn .6s;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n  @keyframes fadeIn {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n    correct\r\n      ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n      : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from 'react';\r\nimport {AnswerObject} from '../App'\r\nimport {Wrapper, ButtonWrapper} from './QuestionCard.Styles'\r\n\r\ntype Props = {\r\n\tquestion: string;\r\n\tanswer: string[];\r\n\tcallback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n\tuserAnswer: AnswerObject | undefined;\r\n\tquestionNr: number;\r\n\ttotalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({ question, answer, callback, userAnswer, questionNr, totalQuestions }) => (\r\n\t<Wrapper>Question Card\r\n        <p className=\"number\">\r\n            Question: {questionNr} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML = {{__html: question}} />\r\n        <div>\r\n            {answer.map(answer => (\r\n                // <ButtonWrapper key = {answer}>\r\n                //     <button disabled = {userAnswer ? true : false} value = {answer} onClick = {callback}>\r\n                //         <span dangerouslySetInnerHTML = {{__html: answer}} />\r\n                //     </button>\r\n                // </ButtonWrapper>\r\n                <ButtonWrapper\r\n                key={answer}\r\n                correct={userAnswer?.correctAnswer === answer}\r\n                userClicked={userAnswer?.answer === answer}\r\n              >\r\n                <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                  <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                </button>\r\n              </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","export const shuffleArray = (array: any[]) => \r\n[...array].sort(() => Math.random() - 0.5)","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { GlobalStyle, Wrapper } from './App.Styles'\r\n\r\n//components\r\nimport QuestionCard from './components/QuestionCard';\r\nimport { fetchQuizQuestions } from './API';\r\n//types\r\nimport { QuestionState, Difficulty } from './API';\r\n\r\nexport type AnswerObject = {\r\n\tquestion: string;\r\n\tanswer: string;\r\n\tcorrect: boolean;\r\n\tcorrectAnswer: string;\r\n};\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nconst App = () => {\r\n\tconst [\r\n\t\tloading,\r\n\t\tsetLoading\r\n\t] = useState(false);\r\n\tconst [\r\n\t\tquestions,\r\n\t\tsetQuestions\r\n\t] = useState<QuestionState[]>([]);\r\n\tconst [\r\n\t\tnumber,\r\n\t\tsetNumber\r\n\t] = useState(0);\r\n\tconst [\r\n\t\tuserAnswers,\r\n\t\tsetUserAnswers\r\n\t] = useState<AnswerObject[]>([]);\r\n\tconst [\r\n\t\tscore,\r\n\t\tsetScore\r\n\t] = useState(0);\r\n\tconst [\r\n\t\tgameOver,\r\n\t\tsetGameOver\r\n\t] = useState(true);\r\n\r\n\tconsole.log('fetchQuizQuestions', fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\r\n\r\n\tconst startTrivia = async () => {\r\n\t\tsetLoading(true);\r\n\t\tsetGameOver(false);\r\n\r\n\t\tconst newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\r\n\r\n\t\tsetQuestions(newQuestions);\r\n\t\tsetScore(0);\r\n\t\tsetUserAnswers([]);\r\n\t\tsetNumber(0);\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n\t\tif (!gameOver) {\r\n\t\t\t//user answer\r\n\t\t\tconst answer = e.currentTarget.value;\r\n\t\t\t//check answers\r\n\t\t\tconst correct = questions[number].correct_answer === answer;\r\n\t\t\t//add score\r\n\t\t\tif (correct) setScore((prev) => prev + 1);\r\n\t\t\t//save answer in awrray\r\n\t\t\tconst AnswerObject = {\r\n\t\t\t\tquestion: questions[number].question,\r\n\t\t\t\tanswer,\r\n\t\t\t\tcorrect,\r\n\t\t\t\tcorrectAnswer: questions[number].correct_answer\r\n\t\t\t};\r\n\r\n\t\t\tsetUserAnswers((prev) => [\r\n\t\t\t\t...prev,\r\n\t\t\t\tAnswerObject\r\n\t\t\t]);\r\n\t\t}\r\n\t};\r\n\r\n\tconst nextQuestion = () => {\r\n\t\tconst nextQuestion = number + 1;\r\n\r\n\t\tif (nextQuestion === TOTAL_QUESTIONS) {\r\n\t\t\tsetGameOver(true)\r\n\t\t} else {\r\n\t\t\tsetNumber(nextQuestion)\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<GlobalStyle />\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<h1>QUIZ</h1>\r\n\t\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n\t\t\t\t\t<button className=\"start\" onClick={startTrivia}>\r\n\t\t\t\t\t\tStart The Quiz\r\n\t\t\t\t\t</button>\r\n\t\t\t\t) : null}\r\n\r\n\t\t\t\t{!gameOver ? <p className=\"score\">Score: {score}</p> : null}\r\n\t\t\t\t{loading ? <p>Loading Questions...</p> : null}\r\n\t\t\t\t{!loading &&\r\n\t\t\t\t\t!gameOver && (\r\n\t\t\t\t\t\t<QuestionCard\r\n\t\t\t\t\t\t\tquestionNr={number + 1}\r\n\t\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\r\n\t\t\t\t\t\t\tquestion={questions[number].question}\r\n\t\t\t\t\t\t\tanswer={questions[number].answers}\r\n\t\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\r\n\t\t\t\t\t\t\tcallback={checkAnswer}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t{!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\r\n\t\t\t\t\t<button className=\"next\" onClick={nextQuestion}>\r\n\t\t\t\t\t\tNext Question\r\n\t\t\t\t\t</button>\r\n\t\t\t\t) : null}\r\n\t\t\t</Wrapper>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n"],"sourceRoot":""}